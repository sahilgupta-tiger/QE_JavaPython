{"name": "TC_003_Validation of executive summary", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.SessionNotCreatedException: Message: session not created: This version of ChromeDriver only supports Chrome version 125\nCurrent browser version is 127.0.6533.100 with binary path C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe\nStacktrace:\n\tGetHandleVerifier [0x00007FF734811F52+60322]\n\t(No symbol) [0x00007FF73478CEC9]\n\t(No symbol) [0x00007FF734647EBA]\n\t(No symbol) [0x00007FF734686202]\n\t(No symbol) [0x00007FF7346853D8]\n\t(No symbol) [0x00007FF73467EFD7]\n\t(No symbol) [0x00007FF73467AF74]\n\t(No symbol) [0x00007FF7346C7934]\n\t(No symbol) [0x00007FF7346C6F90]\n\t(No symbol) [0x00007FF7346BBFC3]\n\t(No symbol) [0x00007FF734689617]\n\t(No symbol) [0x00007FF73468A211]\n\tGetHandleVerifier [0x00007FF734B294AD+3301629]\n\tGetHandleVerifier [0x00007FF734B736D3+3605283]\n\tGetHandleVerifier [0x00007FF734B69450+3563680]\n\tGetHandleVerifier [0x00007FF7348C4326+790390]\n\t(No symbol) [0x00007FF73479750F]\n\t(No symbol) [0x00007FF734793404]\n\t(No symbol) [0x00007FF734793592]\n\t(No symbol) [0x00007FF734782F9F]\n\tBaseThreadInitThunk [0x00007FF8E8B7257D+29]\n\tRtlUserThreadStart [0x00007FF8E974AF28+40]", "trace": "request = <SubRequest 'driver' for <Function test_report_tc3>>\n\n    @pytest.fixture(autouse=True)\n    def driver(request):\n        global driver\n        if browser == \"chrome\":\n            chrome_options = Options()\n            chrome_options.add_argument(\"--incognito\")\n            chrome_options.add_argument(\"--start-maximized\")\n>           driver = webdriver.Chrome(options=chrome_options, service=Service(executable_path=chrome_loc))\n\ntests\\test_cases\\test_bdd_scenarios.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nvenv\\Lib\\site-packages\\selenium\\webdriver\\chrome\\webdriver.py:45: in __init__\n    super().__init__(\nvenv\\Lib\\site-packages\\selenium\\webdriver\\chromium\\webdriver.py:66: in __init__\n    super().__init__(command_executor=executor, options=options)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:212: in __init__\n    self.start_session(capabilities)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:299: in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000239BFCB9850>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"session not created\",\"message\":\"session not created: This version of Chro...07FF734782F9F]\\\\n\\\\tBaseThreadInitThunk [0x00007FF8E8B7257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FF8E974AF28+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: This version of ChromeDriver only supports Chrome version 125\nE       Current browser version is 127.0.6533.100 with binary path C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF734811F52+60322]\nE       \t(No symbol) [0x00007FF73478CEC9]\nE       \t(No symbol) [0x00007FF734647EBA]\nE       \t(No symbol) [0x00007FF734686202]\nE       \t(No symbol) [0x00007FF7346853D8]\nE       \t(No symbol) [0x00007FF73467EFD7]\nE       \t(No symbol) [0x00007FF73467AF74]\nE       \t(No symbol) [0x00007FF7346C7934]\nE       \t(No symbol) [0x00007FF7346C6F90]\nE       \t(No symbol) [0x00007FF7346BBFC3]\nE       \t(No symbol) [0x00007FF734689617]\nE       \t(No symbol) [0x00007FF73468A211]\nE       \tGetHandleVerifier [0x00007FF734B294AD+3301629]\nE       \tGetHandleVerifier [0x00007FF734B736D3+3605283]\nE       \tGetHandleVerifier [0x00007FF734B69450+3563680]\nE       \tGetHandleVerifier [0x00007FF7348C4326+790390]\nE       \t(No symbol) [0x00007FF73479750F]\nE       \t(No symbol) [0x00007FF734793404]\nE       \t(No symbol) [0x00007FF734793592]\nE       \t(No symbol) [0x00007FF734782F9F]\nE       \tBaseThreadInitThunk [0x00007FF8E8B7257D+29]\nE       \tRtlUserThreadStart [0x00007FF8E974AF28+40]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: SessionNotCreatedException"}, "description": "D:\\Project\\QE_JavaPython\\framework_python\\test_py_web\\tests\\test_cases\\..\\features\\power_bi_dashboard.feature: TC_003_Validation of executive summary", "start": 1723438259648, "stop": 1723438259648, "uuid": "6695f563-6b89-453d-9d5b-7740e442d6ed", "historyId": "a30f358895cde7687d435585e62b12cd", "testCaseId": "a30f358895cde7687d435585e62b12cd", "fullName": "tests.test_cases.test_bdd_scenarios#test_report_tc3", "labels": [{"name": "severity", "value": "normal"}, {"name": "feature", "value": "Validate Grid Details and Drill Through"}, {"name": "tag", "value": "@pytest.mark.usefixtures"}, {"name": "parentSuite", "value": "tests.test_cases"}, {"name": "suite", "value": "test_bdd_scenarios"}, {"name": "host", "value": "TIGER04836"}, {"name": "thread", "value": "17764-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_cases.test_bdd_scenarios"}]}