{"name": "TC_003_Validation of executive summary", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=127.0.6533.100)\nStacktrace:\n\tGetHandleVerifier [0x00007FF67F2B9632+30946]\n\t(No symbol) [0x00007FF67F26E3C9]\n\t(No symbol) [0x00007FF67F166FDA]\n\t(No symbol) [0x00007FF67F13CB85]\n\t(No symbol) [0x00007FF67F1E37A7]\n\t(No symbol) [0x00007FF67F1FA771]\n\t(No symbol) [0x00007FF67F1DC813]\n\t(No symbol) [0x00007FF67F1AA6E5]\n\t(No symbol) [0x00007FF67F1AB021]\n\tGetHandleVerifier [0x00007FF67F3EF83D+1301229]\n\tGetHandleVerifier [0x00007FF67F3FBDB7+1351783]\n\tGetHandleVerifier [0x00007FF67F3F2A03+1313971]\n\tGetHandleVerifier [0x00007FF67F2EDD06+245686]\n\t(No symbol) [0x00007FF67F27758F]\n\t(No symbol) [0x00007FF67F273804]\n\t(No symbol) [0x00007FF67F273992]\n\t(No symbol) [0x00007FF67F26A3EF]\n\tBaseThreadInitThunk [0x00007FF8E8B7257D+29]\n\tRtlUserThreadStart [0x00007FF8E974AF28+40]", "trace": "fixturefunc = <function login_to_dashboard at 0x0000025B4E27EA20>\nrequest = <FixtureRequest for <Function test_report_tc3>>\nkwargs = {'tcname': 'tc3'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\nvenv\\Lib\\site-packages\\_pytest\\fixtures.py:897: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\test_cases\\test_bdd_scenarios.py:135: in login_to_dashboard\n    pbiobj.power_BI_login(emailID, decode(encryptedPasscode))\nsrc\\pom\\pages\\loginpowerbi.py:42: in power_BI_login\n    if len(self.find_elements_by_locator(By.XPATH, extraPopup)) > 0:\nsrc\\pom\\pages\\base_page.py:53: in find_elements_by_locator\n    return self.driver.find_elements(locator1, locator2)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:778: in find_elements\n    return self.execute(Command.FIND_ELEMENTS, {\"using\": by, \"value\": value})[\"value\"] or []\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000025B360ADD10>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...07FF67F26A3EF]\\\\n\\\\tBaseThreadInitThunk [0x00007FF8E8B7257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FF8E974AF28+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=127.0.6533.100)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF67F2B9632+30946]\nE       \t(No symbol) [0x00007FF67F26E3C9]\nE       \t(No symbol) [0x00007FF67F166FDA]\nE       \t(No symbol) [0x00007FF67F13CB85]\nE       \t(No symbol) [0x00007FF67F1E37A7]\nE       \t(No symbol) [0x00007FF67F1FA771]\nE       \t(No symbol) [0x00007FF67F1DC813]\nE       \t(No symbol) [0x00007FF67F1AA6E5]\nE       \t(No symbol) [0x00007FF67F1AB021]\nE       \tGetHandleVerifier [0x00007FF67F3EF83D+1301229]\nE       \tGetHandleVerifier [0x00007FF67F3FBDB7+1351783]\nE       \tGetHandleVerifier [0x00007FF67F3F2A03+1313971]\nE       \tGetHandleVerifier [0x00007FF67F2EDD06+245686]\nE       \t(No symbol) [0x00007FF67F27758F]\nE       \t(No symbol) [0x00007FF67F273804]\nE       \t(No symbol) [0x00007FF67F273992]\nE       \t(No symbol) [0x00007FF67F26A3EF]\nE       \tBaseThreadInitThunk [0x00007FF8E8B7257D+29]\nE       \tRtlUserThreadStart [0x00007FF8E974AF28+40]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: NoSuchWindowException"}, "description": "D:\\Project\\QE_JavaPython\\framework_python\\test_py_web\\tests\\test_cases\\..\\features\\power_bi_dashboard.feature: TC_003_Validation of executive summary", "steps": [{"name": "Login into power bi using id", "status": "passed", "start": 1723438595471, "stop": 1723438596609}, {"name": "Login into power bi using encrypted password", "status": "passed", "start": 1723438601617, "stop": 1723438602932}, {"name": "Clicked the extra pop up in login screen", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=127.0.6533.100)\nStacktrace:\n\tGetHandleVerifier [0x00007FF67F2B9632+30946]\n\t(No symbol) [0x00007FF67F26E3C9]\n\t(No symbol) [0x00007FF67F166FDA]\n\t(No symbol) [0x00007FF67F13CB85]\n\t(No symbol) [0x00007FF67F1E37A7]\n\t(No symbol) [0x00007FF67F1FA771]\n\t(No symbol) [0x00007FF67F1DC813]\n\t(No symbol) [0x00007FF67F1AA6E5]\n\t(No symbol) [0x00007FF67F1AB021]\n\tGetHandleVerifier [0x00007FF67F3EF83D+1301229]\n\tGetHandleVerifier [0x00007FF67F3FBDB7+1351783]\n\tGetHandleVerifier [0x00007FF67F3F2A03+1313971]\n\tGetHandleVerifier [0x00007FF67F2EDD06+245686]\n\t(No symbol) [0x00007FF67F27758F]\n\t(No symbol) [0x00007FF67F273804]\n\t(No symbol) [0x00007FF67F273992]\n\t(No symbol) [0x00007FF67F26A3EF]\n\tBaseThreadInitThunk [0x00007FF8E8B7257D+29]\n\tRtlUserThreadStart [0x00007FF8E974AF28+40]\n\n", "trace": "  File \"D:\\Project\\QE_JavaPython\\framework_python\\test_py_web\\src\\pom\\pages\\loginpowerbi.py\", line 42, in power_BI_login\n    if len(self.find_elements_by_locator(By.XPATH, extraPopup)) > 0:\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"D:\\Project\\QE_JavaPython\\framework_python\\test_py_web\\src\\pom\\pages\\base_page.py\", line 53, in find_elements_by_locator\n    return self.driver.find_elements(locator1, locator2)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"D:\\Project\\QE_JavaPython\\framework_python\\test_py_web\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 778, in find_elements\n    return self.execute(Command.FIND_ELEMENTS, {\"using\": by, \"value\": value})[\"value\"] or []\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"D:\\Project\\QE_JavaPython\\framework_python\\test_py_web\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 354, in execute\n    self.error_handler.check_response(response)\n  File \"D:\\Project\\QE_JavaPython\\framework_python\\test_py_web\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "start": 1723438605936, "stop": 1723438605949}], "attachments": [{"name": "log", "source": "39f8075b-f66c-4159-b35f-87402734783d-attachment.txt", "type": "text/plain"}], "start": 1723438585410, "stop": 1723438606023, "uuid": "ff01f920-c743-4bda-92c3-3f1a8899b113", "historyId": "a30f358895cde7687d435585e62b12cd", "testCaseId": "a30f358895cde7687d435585e62b12cd", "fullName": "tests.test_cases.test_bdd_scenarios#test_report_tc3", "labels": [{"name": "severity", "value": "normal"}, {"name": "feature", "value": "Validate Grid Details and Drill Through"}, {"name": "tag", "value": "@pytest.mark.usefixtures"}, {"name": "parentSuite", "value": "tests.test_cases"}, {"name": "suite", "value": "test_bdd_scenarios"}, {"name": "host", "value": "TIGER04836"}, {"name": "thread", "value": "24648-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_cases.test_bdd_scenarios"}]}