{"uid":"8454d3258a60398c","name":"TC_003_Validation of executive summary","fullName":"tests.test_cases.test_bdd_scenarios#test_report_tc3","historyId":"a30f358895cde7687d435585e62b12cd","time":{"start":1708066035772,"stop":1708066177359,"duration":141587},"description":"D:\\My_Workspaces\\GitHub\\QA_Tiger_Automation\\tests\\test_cases\\..\\features\\power_bi_dashboard.feature: TC_003_Validation of executive summary","descriptionHtml":"<p>D:\\My_Workspaces\\GitHub\\QA_Tiger_Automation\\tests\\test_cases..\\features\\power_bi_dashboard.feature: TC_003_Validation of executive summary</p>\n","status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <div class=\"slicerItemContainer\" role=\"option\" aria-setsize=\"-1\" title=\"Vegetable Oil\" aria-posinset=\"16\" data-row-index=\"16\" data-row-id=\"0:16\" aria-selected=\"false\" style=\"margin-left: 0px;\">...</div> is not clickable at point (426, 430). Other element would receive the click: <div class=\"slicer-dropdown-popup visual themeableElement focused\" focus-nav-mode=\"Group\" id=\"slicer-dropdown-popup-e0d11a11-5e23-08dd-8b61-48cd29840716\" style=\"background-color: rgb(255, 255, 255); width: 159.406px; transform: scale(0.634115); left: 375.732px; top: 300.242px; transform-origin: left top; display: block;\">...</div>\n  (Session info: chrome=121.0.6167.161)\nStacktrace:\n\tGetHandleVerifier [0x00007FF6F0765E42+3538674]\n\t(No symbol) [0x00007FF6F0384C02]\n\t(No symbol) [0x00007FF6F0235AEB]\n\t(No symbol) [0x00007FF6F02833E4]\n\t(No symbol) [0x00007FF6F0281122]\n\t(No symbol) [0x00007FF6F027E884]\n\t(No symbol) [0x00007FF6F027D5A9]\n\t(No symbol) [0x00007FF6F0271950]\n\t(No symbol) [0x00007FF6F029F0AA]\n\t(No symbol) [0x00007FF6F027124A]\n\t(No symbol) [0x00007FF6F029F2C0]\n\t(No symbol) [0x00007FF6F02BBDE3]\n\t(No symbol) [0x00007FF6F029EE53]\n\t(No symbol) [0x00007FF6F026F514]\n\t(No symbol) [0x00007FF6F0270631]\n\tGetHandleVerifier [0x00007FF6F0796CAD+3738973]\n\tGetHandleVerifier [0x00007FF6F07EC506+4089270]\n\tGetHandleVerifier [0x00007FF6F07E4823+4057299]\n\tGetHandleVerifier [0x00007FF6F04B5C49+720121]\n\t(No symbol) [0x00007FF6F039126F]\n\t(No symbol) [0x00007FF6F038C304]\n\t(No symbol) [0x00007FF6F038C432]\n\t(No symbol) [0x00007FF6F037BD04]\n\tBaseThreadInitThunk [0x00007FFC84DD257D+29]\n\tRtlUserThreadStart [0x00007FFC8556AA58+40]","statusTrace":"fixturefunc = <function login_to_dashboard at 0x00000172BB7C56C0>\nrequest = <FixtureRequest for <Function test_report_tc3>>\nkwargs = {'tcname': 'tc3'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n..\\..\\Py_Projects\\bdevenv\\lib\\site-packages\\_pytest\\fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\test_cases\\test_bdd_scenarios.py:140: in login_to_dashboard\n    srep.selection_of_filters(tc_params)\nsrc\\pom\\pages\\executive_summary_dashboard.py:86: in selection_of_filters\n    self.click_by_locator(By.XPATH, ele_xpath)\nsrc\\pom\\pages\\base_page.py:67: in click_by_locator\n    return self.find_element_by_locator(locator1,locator2).click()\n..\\..\\Py_Projects\\bdevenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:93: in click\n    self._execute(Command.CLICK_ELEMENT)\n..\\..\\Py_Projects\\bdevenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:394: in _execute\n    return self._parent.execute(command, params)\n..\\..\\Py_Projects\\bdevenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000172BB6F2F80>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...07FF6F037BD04]\\\\n\\\\tBaseThreadInitThunk [0x00007FFC84DD257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFC8556AA58+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <div class=\"slicerItemContainer\" role=\"option\" aria-setsize=\"-1\" title=\"Vegetable Oil\" aria-posinset=\"16\" data-row-index=\"16\" data-row-id=\"0:16\" aria-selected=\"false\" style=\"margin-left: 0px;\">...</div> is not clickable at point (426, 430). Other element would receive the click: <div class=\"slicer-dropdown-popup visual themeableElement focused\" focus-nav-mode=\"Group\" id=\"slicer-dropdown-popup-e0d11a11-5e23-08dd-8b61-48cd29840716\" style=\"background-color: rgb(255, 255, 255); width: 159.406px; transform: scale(0.634115); left: 375.732px; top: 300.242px; transform-origin: left top; display: block;\">...</div>\nE         (Session info: chrome=121.0.6167.161)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF6F0765E42+3538674]\nE       \t(No symbol) [0x00007FF6F0384C02]\nE       \t(No symbol) [0x00007FF6F0235AEB]\nE       \t(No symbol) [0x00007FF6F02833E4]\nE       \t(No symbol) [0x00007FF6F0281122]\nE       \t(No symbol) [0x00007FF6F027E884]\nE       \t(No symbol) [0x00007FF6F027D5A9]\nE       \t(No symbol) [0x00007FF6F0271950]\nE       \t(No symbol) [0x00007FF6F029F0AA]\nE       \t(No symbol) [0x00007FF6F027124A]\nE       \t(No symbol) [0x00007FF6F029F2C0]\nE       \t(No symbol) [0x00007FF6F02BBDE3]\nE       \t(No symbol) [0x00007FF6F029EE53]\nE       \t(No symbol) [0x00007FF6F026F514]\nE       \t(No symbol) [0x00007FF6F0270631]\nE       \tGetHandleVerifier [0x00007FF6F0796CAD+3738973]\nE       \tGetHandleVerifier [0x00007FF6F07EC506+4089270]\nE       \tGetHandleVerifier [0x00007FF6F07E4823+4057299]\nE       \tGetHandleVerifier [0x00007FF6F04B5C49+720121]\nE       \t(No symbol) [0x00007FF6F039126F]\nE       \t(No symbol) [0x00007FF6F038C304]\nE       \t(No symbol) [0x00007FF6F038C432]\nE       \t(No symbol) [0x00007FF6F037BD04]\nE       \tBaseThreadInitThunk [0x00007FFC84DD257D+29]\nE       \tRtlUserThreadStart [0x00007FFC8556AA58+40]\n\n..\\..\\Py_Projects\\bdevenv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementClickInterceptedException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"driver","time":{"start":1708066001023,"stop":1708066035764,"duration":34741},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"attachmentStep":false},{"name":"_pytest_bdd_example","time":{"start":1708066035765,"stop":1708066035765,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"attachmentStep":false}],"testStage":{"description":"D:\\My_Workspaces\\GitHub\\QA_Tiger_Automation\\tests\\test_cases\\..\\features\\power_bi_dashboard.feature: TC_003_Validation of executive summary","status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <div class=\"slicerItemContainer\" role=\"option\" aria-setsize=\"-1\" title=\"Vegetable Oil\" aria-posinset=\"16\" data-row-index=\"16\" data-row-id=\"0:16\" aria-selected=\"false\" style=\"margin-left: 0px;\">...</div> is not clickable at point (426, 430). Other element would receive the click: <div class=\"slicer-dropdown-popup visual themeableElement focused\" focus-nav-mode=\"Group\" id=\"slicer-dropdown-popup-e0d11a11-5e23-08dd-8b61-48cd29840716\" style=\"background-color: rgb(255, 255, 255); width: 159.406px; transform: scale(0.634115); left: 375.732px; top: 300.242px; transform-origin: left top; display: block;\">...</div>\n  (Session info: chrome=121.0.6167.161)\nStacktrace:\n\tGetHandleVerifier [0x00007FF6F0765E42+3538674]\n\t(No symbol) [0x00007FF6F0384C02]\n\t(No symbol) [0x00007FF6F0235AEB]\n\t(No symbol) [0x00007FF6F02833E4]\n\t(No symbol) [0x00007FF6F0281122]\n\t(No symbol) [0x00007FF6F027E884]\n\t(No symbol) [0x00007FF6F027D5A9]\n\t(No symbol) [0x00007FF6F0271950]\n\t(No symbol) [0x00007FF6F029F0AA]\n\t(No symbol) [0x00007FF6F027124A]\n\t(No symbol) [0x00007FF6F029F2C0]\n\t(No symbol) [0x00007FF6F02BBDE3]\n\t(No symbol) [0x00007FF6F029EE53]\n\t(No symbol) [0x00007FF6F026F514]\n\t(No symbol) [0x00007FF6F0270631]\n\tGetHandleVerifier [0x00007FF6F0796CAD+3738973]\n\tGetHandleVerifier [0x00007FF6F07EC506+4089270]\n\tGetHandleVerifier [0x00007FF6F07E4823+4057299]\n\tGetHandleVerifier [0x00007FF6F04B5C49+720121]\n\t(No symbol) [0x00007FF6F039126F]\n\t(No symbol) [0x00007FF6F038C304]\n\t(No symbol) [0x00007FF6F038C432]\n\t(No symbol) [0x00007FF6F037BD04]\n\tBaseThreadInitThunk [0x00007FFC84DD257D+29]\n\tRtlUserThreadStart [0x00007FFC8556AA58+40]","statusTrace":"fixturefunc = <function login_to_dashboard at 0x00000172BB7C56C0>\nrequest = <FixtureRequest for <Function test_report_tc3>>\nkwargs = {'tcname': 'tc3'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n..\\..\\Py_Projects\\bdevenv\\lib\\site-packages\\_pytest\\fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\test_cases\\test_bdd_scenarios.py:140: in login_to_dashboard\n    srep.selection_of_filters(tc_params)\nsrc\\pom\\pages\\executive_summary_dashboard.py:86: in selection_of_filters\n    self.click_by_locator(By.XPATH, ele_xpath)\nsrc\\pom\\pages\\base_page.py:67: in click_by_locator\n    return self.find_element_by_locator(locator1,locator2).click()\n..\\..\\Py_Projects\\bdevenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:93: in click\n    self._execute(Command.CLICK_ELEMENT)\n..\\..\\Py_Projects\\bdevenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:394: in _execute\n    return self._parent.execute(command, params)\n..\\..\\Py_Projects\\bdevenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000172BB6F2F80>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...07FF6F037BD04]\\\\n\\\\tBaseThreadInitThunk [0x00007FFC84DD257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFC8556AA58+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <div class=\"slicerItemContainer\" role=\"option\" aria-setsize=\"-1\" title=\"Vegetable Oil\" aria-posinset=\"16\" data-row-index=\"16\" data-row-id=\"0:16\" aria-selected=\"false\" style=\"margin-left: 0px;\">...</div> is not clickable at point (426, 430). Other element would receive the click: <div class=\"slicer-dropdown-popup visual themeableElement focused\" focus-nav-mode=\"Group\" id=\"slicer-dropdown-popup-e0d11a11-5e23-08dd-8b61-48cd29840716\" style=\"background-color: rgb(255, 255, 255); width: 159.406px; transform: scale(0.634115); left: 375.732px; top: 300.242px; transform-origin: left top; display: block;\">...</div>\nE         (Session info: chrome=121.0.6167.161)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF6F0765E42+3538674]\nE       \t(No symbol) [0x00007FF6F0384C02]\nE       \t(No symbol) [0x00007FF6F0235AEB]\nE       \t(No symbol) [0x00007FF6F02833E4]\nE       \t(No symbol) [0x00007FF6F0281122]\nE       \t(No symbol) [0x00007FF6F027E884]\nE       \t(No symbol) [0x00007FF6F027D5A9]\nE       \t(No symbol) [0x00007FF6F0271950]\nE       \t(No symbol) [0x00007FF6F029F0AA]\nE       \t(No symbol) [0x00007FF6F027124A]\nE       \t(No symbol) [0x00007FF6F029F2C0]\nE       \t(No symbol) [0x00007FF6F02BBDE3]\nE       \t(No symbol) [0x00007FF6F029EE53]\nE       \t(No symbol) [0x00007FF6F026F514]\nE       \t(No symbol) [0x00007FF6F0270631]\nE       \tGetHandleVerifier [0x00007FF6F0796CAD+3738973]\nE       \tGetHandleVerifier [0x00007FF6F07EC506+4089270]\nE       \tGetHandleVerifier [0x00007FF6F07E4823+4057299]\nE       \tGetHandleVerifier [0x00007FF6F04B5C49+720121]\nE       \t(No symbol) [0x00007FF6F039126F]\nE       \t(No symbol) [0x00007FF6F038C304]\nE       \t(No symbol) [0x00007FF6F038C432]\nE       \t(No symbol) [0x00007FF6F037BD04]\nE       \tBaseThreadInitThunk [0x00007FFC84DD257D+29]\nE       \tRtlUserThreadStart [0x00007FFC8556AA58+40]\n\n..\\..\\Py_Projects\\bdevenv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementClickInterceptedException","steps":[{"name":"Login into power bi using id","time":{"start":1708066051684,"stop":1708066053749,"duration":2065},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"attachmentStep":false},{"name":"Login into power bi using encrypted password","time":{"start":1708066058756,"stop":1708066066635,"duration":7879},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"attachmentStep":false},{"name":"Clicked the extra pop up in login screen","time":{"start":1708066069655,"stop":1708066096024,"duration":26369},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"attachmentStep":false},{"name":"Reset Filter","time":{"start":1708066111142,"stop":1708066115395,"duration":4253},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"attachmentStep":false}],"attachments":[{"uid":"8222bfd3044be3ec","name":"log","source":"8222bfd3044be3ec.txt","type":"text/plain","size":1084},{"uid":"65dfe1d2b7440ecc","name":"stdout","source":"65dfe1d2b7440ecc.txt","type":"text/plain","size":12859}],"parameters":[],"hasContent":true,"shouldDisplayMessage":true,"attachmentsCount":2,"stepsCount":4,"attachmentStep":false},"afterStages":[{"name":"driver::0","time":{"start":1708066177689,"stop":1708066183160,"duration":5471},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"attachmentStep":false}],"labels":[{"name":"severity","value":"normal"},{"name":"feature","value":"Validate Grid Details and Drill Through"},{"name":"tag","value":"@pytest.mark.usefixtures"},{"name":"parentSuite","value":"tests.test_cases"},{"name":"suite","value":"test_bdd_scenarios"},{"name":"host","value":"TIGER01340"},{"name":"thread","value":"1944-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_cases.test_bdd_scenarios"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["@pytest.mark.usefixtures"]},"source":"8454d3258a60398c.json","parameterValues":[]}