pipeline {
    agent any
    parameters {
        separator(name: 'Data_Testing', sectionHeader: 'Data ETL Testing')
        booleanParam(name: 'skip_stg_data', defaultValue: false,
                description: 'Click above to skip data etl testing stage')
        choice (choices: ["count", "content", "duplicate"],
                description: 'Type of testing to be performed in DATF',
                name: 'TEST_TYPE')
        string (name: 'TEST_SELECT', defaultValue: 'all',
                description: 'Enter list of test cases to execute, separated by comma & no-spaces.')
        separator(name: 'Functional_Testing', sectionHeader: 'Functional Testing')
        booleanParam(name: 'skip_stg_func', defaultValue: false,
                    description: 'Click above to skip functional testing stage')
        string (name: 'testcases', defaultValue: 'tc1',
                description: 'Enter list of test case markers to execute, separated by comma & no-spaces.')
        separator(name: 'Performance_Testing', sectionHeader: 'Performance Testing')
        booleanParam(name: 'skip_stg_nfr', defaultValue: false,
                description: 'Click above to skip performance testing stage')
        separator(name: 'Security_Testing', sectionHeader: 'Security Testing')
        booleanParam(name: 'skip_stg_sec', defaultValue: false,
                description: 'Click above to skip security testing stage')
        choice (choices: ["Baseline", "APIS", "Full"],
                description: 'Type of security scan that is going to perform inside the container',
                name: 'SCAN_TYPE')
        string (name: 'TARGET', defaultValue: "https://example.com",
             description: 'Target URL to Security Scan using ZAP')
    }
    options {
        timeout(time: 55, unit: 'MINUTES')
        buildDiscarder(logRotator(numToKeepStr: '25'))
    }
    environment {
        jmeterpath = 'D:/My_Programs/Jmeter'
        datfpath = 'D:/My_Workspaces/GitHub/QE_ATF/datf_core/'
        containerZAP = 'owasp_zap'
        containerATF = 'pyspark_datf'
        currwrkdir = pwd()
    }
    stages {
        stage('Infra Setup for Auto Execution'){
            steps {
                script {
                    catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                        if (!params.skip_stg_data) {
                            def datfName = "${env.containerATF}"
                            echo "### Starting DATF PySpark container"
                            def datf_cwd = "${env.datfpath}"
                            bat """
                                docker run -dt -v $datf_cwd:/app \
                                --name $datfName apache/spark-py bash
                            """
                            def pytrustcmd = """\"pip config set global.trusted-host \
                                                  'pypi.org files.pythonhosted.org pypi.python.org' \
                                                  --trusted-host=pypi.python.org \
                                                  --trusted-host=pypi.org \
                                                  --trusted-host=files.pythonhosted.org\""""
                            bat "docker exec -u root $datfName bash -c $pytrustcmd"
                            def pyupcmd = "\"python3 -m pip install --upgrade pip\""
                            bat "docker exec -u root $datfName bash -c $pyupcmd"
                            echo "### Installing plugins from Scripts folder"
                            bat """docker exec -u root $datfName bash \
                            -c "cd / && sh app/scripts/install.sh"
                            """
                        }
                        if (!params.skip_stg_func) {
                            echo '### Install Python libraries for App'
                            withPythonEnv('python3') {
                                bat """
                                python.exe -m pip install --upgrade pip
                                pip install --no-cache-dir -r requirements.txt
                                """
                            }
                        }
                        if (!params.skip_stg_sec) {
                            def owaspName = "${env.containerZAP}"
                            echo "### Starting OWASP ZAP container"
                            bat """
                            docker run -dt --name $owaspName \
                            owasp/zap2docker-stable /bin/bash
                            """
                        }
                    }
                }
            }
        }
        stage('Execute Data ETL Automation'){
            when { expression { params.skip_stg_data != true } }
            steps {
                echo '### Execute Data Test Suite ###'
                script {
                    catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                        def datfName = "${env.containerATF}"
                        test_type = "${params.TEST_TYPE}"
                        echo "----> test_type: $test_type"
                        test_select = "${params.TEST_SELECT}"
                        echo "----> test_select: $test_select"
                        echo "### Executing DATF PySpark test cases"
                        bat """docker exec -u root $datfName bash -c \
                            "cd / && cd app/scripts && sh testingstart.sh $test_type $test_select"
                        """
                        echo "### Copy PDF & HTML report to Workspace"
                        def datfHtmlPath = "${env.currwrkdir}/datfreport.html"
                        def datfTrendsHtml = "${env.currwrkdir}/datf_trends_report.html"
                        def datfSummaryPath = "${env.currwrkdir}/datf_summary.pdf"
                        def datfCombinedPath = "${env.currwrkdir}/datf_combined.pdf"
                        bat """
                            docker cp $datfName:/app/utils/reports/datfreport.html $datfHtmlPath
                            docker cp $datfName:/app/utils/reports/datf_trends_report.html $datfTrendsHtml
                            docker cp $datfName:/app/utils/reports/datf_summary.pdf $datfSummaryPath
                            docker cp $datfName:/app/utils/reports/datf_combined.pdf $datfCombinedPath
                        """
                        echo "### Stop and delete DATF container"
                        bat "docker stop $datfName"
                        bat "docker rm $datfName"
                    }
                }
            }
        }
        stage('Execute Functional Automation') {
            when { expression { params.skip_stg_func != true } }
            steps {
                echo '### Execute App Test Suite ###'
                catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                    withPythonEnv('python3') {
                        bat 'python run.py'
                    }
                }
            }
        }
        stage('Execute Performance Tests') {
            when { expression { params.skip_stg_nfr != true } }
            steps {
                echo '### Execute Performance Test Suite ###'
                catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                    dir("${env.jmeterpath}") {
                        bat 'bin/jmeter.bat -n -t JMX/Demo_PowerBi.jmx -l JMX/Demo_PowerBi.jtl'
                        bat """bin/JMeterPluginsCMD.bat --generate-csv JMX/Demo_PowerBi.csv \
                            --input-jtl JMX/Demo_PowerBi.jtl --plugin-type AggregateReport"""
                    }
                }
            }
        }
        stage('Execute Security Test on Target') {
            when { expression { params.skip_stg_sec != true } }
            steps {
                script {
                    catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                        echo "### Prepare ZAP wrk directory"
                        def owaspName = "${env.containerZAP}"
                        bat "docker exec $owaspName mkdir /zap/wrk"
                        scan_type = "${params.SCAN_TYPE}"
                        echo "----> scan_type: $scan_type"
                        target = "${params.TARGET}"
                        if(scan_type == "Baseline"){
                         bat """
                             docker exec $owaspName zap-baseline.py -t $target \
                             -r report.html -I
                         """
                        }
                        else if(scan_type == "APIS"){
                         bat """
                             docker exec $owaspName zap-api-scan.py -t $target \
                             -r report.html -I
                         """
                        }
                        else if(scan_type == "Full"){
                         bat """
                             docker exec $owaspName zap-full-scan.py -t $target \
                             -r report.html -I
                         """
                        }
                        else {
                         echo "### Something went wrong..."
                        }
                        echo "### Copy ZAP Report to Workspace"
                        def htmlPath = "${env.currwrkdir}/report.html"
                        bat """
                            docker cp $owaspName:/zap/wrk/report.html $htmlPath
                        """
                        echo "### Stop and delete ZAP container"
                        bat "docker stop $owaspName"
                        bat "docker rm $owaspName"
                    }
                }
            }
        }
        stage('Post Build Reporting') {
            steps {
                script {
                    junit 'tests/tests_results/integration.xml'
                    allure([
                            includeProperties: false,
                            jdk: '',
                            properties: [],
                            reportBuildPolicy: 'ALWAYS',
                            results: [[path: 'tests/tests_results/reports/allure_results']]
                    ])
                    /*def owaspName = "${env.containerZAP}"
                    def owaspExists = bat(script: "docker ps -a --format '{{.Names}}' | findstr /c:\"${owaspName}\"", returnStatus: true)
                    if (owaspExists == 0) {
                        bat "docker stop $owaspName"
                        bat "docker rm $owaspName"
                    }
                    def datfName = "${env.containerATF}"
                    def datfExists = bat(script: "docker ps -a --format '{{.Names}}' | findstr /c:\"${datfName}\"", returnStatus: true)
                    if (datfExists == 0) {
                        bat "docker stop $datfName"
                        bat "docker rm $datfName"
                    }*/
                    if (!params.skip_stg_data) {
                        publishHTML([
                                allowMissing: true,
                                alwaysLinkToLastBuild: true,
                                keepAll: true,
                                reportDir: "${env.currwrkdir}",
                                reportFiles: 'datfreport.html,datf_trends_report.html',
                                reportName: 'DATF-Test-Report',
                                reportTitles: 'Summary,Trends'
                        ])
                        archiveArtifacts artifacts: 'datf_summary.pdf'
                        archiveArtifacts artifacts: 'datf_combined.pdf'
                    }
                    if (!params.skip_stg_sec) {
                        publishHTML([
                                allowMissing: true,
                                alwaysLinkToLastBuild: true,
                                keepAll: true,
                                reportDir: "${env.currwrkdir}",
                                reportFiles: 'report.html',
                                reportName: 'ZAP-Scan-Report',
                                reportTitles: 'HTML'
                        ])
                    }
                    if (!params.skip_stg_nfr) {
                        dir("${env.jmeterpath}") {
                            perfReport '**/*.csv'
                        }
                    }
                }
            }
        }
    }
}